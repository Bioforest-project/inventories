---
title: "Data aggregation"
format:
  pdf:
    toc: true
    number-sections: true
    colorlinks: true
execute:
  echo: false      
---

```{r setup, include=FALSE}
knitr::opts_knit$set(root.dir = rprojroot::find_rstudio_root_file())
library(data.table)
library(BIOMASS)
library(ggplot2)
library(tidyverse)
```

<!-- TO DO
* check why the chucks are displayed despite the echo: false instruction.
-->

# Introduction

This document is made to be used by data contributors of the Bioforest project, which is an initiative of the TmFO network. By running this quarto document, you will be able to visualize various aspects of your data, and generate an aggregated data set as output. This aggregated data set (depending on the variables available) will be used for analysis by various working groups in the Bioforest project.

Before you run this quarto script, please make sure that you complete the following checklist, and ensure the your dataset is named and structured correctly to be able to run this script.

Checklist:

-   what is raw data? - uncorrected data

<!-- -->

-   sign the data agreement

-   harmonize your dataset

-   send species list (should already be ok)

-   add plot-level information in this [document](https://docs.google.com/spreadsheets/d/1fq2owxMBLBwwibcdw2uQQFxnIhsMbaH4Qcj_xUwVvSQ/edit?usp=drive_link)

<!-- Load the data -->

```{r load data}
# data_raw <- read.csv("data/raw_data/harmonized_data_bafog_v1.csv")  # nolint
data_raw <- read.csv("data/raw_data/harmonized_data_mbaiki_v1.csv")
```

# General presentation of the data

This document presents the data aggregation for the `r unique(data_raw$Site)`. This site had `r length(unique(data_raw$Plot))` plots: `r unique(data_raw$Plot)`.

It has `r dim(data_raw)[1]` observations, belonging to `r length(unique(data_raw$IdStem))` stems.

The following table shows the number of censuses per plots.

```{r censusNb}
data_raw %>%
  group_by(Plot) %>%
  summarise(census_number = length(unique(IdCensus))) %>%
  knitr::kable()
```

Censuses were conducted between `r min(data_raw$Year)` and `r max(data_raw$Year)`.

*Please add a comment on question XXXX of the survey, if there are missing plots or censuses.*

# Check data consistency

This step checks for the absence of "anomalies" in the data.

## No NA values in DBH

```{r Na_DBH}
if (anyNA(data_raw$Diameter)) {
  nb_na_dbh <- sum(is.na(data_raw$Diameter))
  perc_na_dbh <- round(
    sum(is.na(data_raw$Diameter)) * 100 / dim(data_raw)[1],
    2
  )
  text <- paste("There are",
    nb_na_dbh,
    "missing diameters in the data, which represent",
    perc_na_dbh,
    "% of the observations.
    The missing values are distributed across the plots and censuses as follow:.", # nolint
    sep = " "
  )
} else {
  text <- "There are no missing diameter in the data."
}
```

`r text`

```{r explo_na_DBH}
if (anyNA(data_raw$Diameter)) {
  data_raw %>%
    filter(is.na(Diameter)) %>%
    count(Plot, IdCensus) %>%
    pivot_wider(names_from = Plot, values_from = n) %>%
    knitr::kable()
}
```

## DBH cutoff

```{r DBHcutoff}
#| message: false
#| warning: false
if (length(unique(data_raw$MinDBH)) == 1) {
  text <- paste(
    "There is a single DBH cutoff set to",
    unique(data_raw$MinDBH),
    "cm for the whole data set."
  )
} else {
  # count the number of cutoff per plot and census
  cutoff_plot_cens <- data_raw %>%
    group_by(Plot, IdCensus) %>%
    summarise(cutoff = length(unique(MinDBH)))
  if (length(unique(cutoff_plot_cens$cutoff)) != 1) {
    text <- "There is more than one DBH cutoff per plot and per census.
    This is a problem, please check the data."
  } else {
    text <- "There are several DBH cutoff, as follow:"
  }
}
```

`r text`

```{r display_cutoff}
#| message: false
#| warning: false
if (length(unique(data_raw$MinDBH)) != 1) {
  if (length(unique(cutoff_plot_cens$cutoff)) == 1) {
    data_raw %>%
      group_by(Plot, IdCensus) %>%
      summarise(dbhcut = unique(MinDBH)) %>%
      pivot_wider(names_from = Plot, values_from = dbhcut) %>%
      knitr::kable()
  }
}
```

## All trees above the DBH cutoff

```{r abovecutoff}
below_cut <- data_raw %>%
  filter(Diameter < MinDBH) %>%
  select(MinDBH, IdCensus, Plot, Diameter)
if (dim(below_cut)[1] == 0) {
  text <- "There are no stems with a DBH below the DBH cutoff."
  data_cor <- data_raw
} else {
  below_cut <- below_cut %>%
    mutate(DBHDiff = MinDBH - Diameter)
  data_cor <- data_raw %>% filter(Diameter >= MinDBH)
  text <- paste("There are ",
    dim(below_cut)[1],
    " observations of stems with a DBH below the DBH cutoff (",
    round(dim(below_cut)[1] * 100 / dim(data_raw)[1], 1),
    "%). For these observations, the difference between
                the DBH and the cutoff ranges between ",
    round(min(below_cut$DBHDiff), 2), " cm and ",
    round(max(below_cut$DBHDiff), 2),
    " cm, with a median value of ",
    round(median(below_cut$DBHDiff), 2), "cm.
                These observations are removed, leaving a dataset of ",
    dim(data_cor)[1],
    " observations.",
    sep = ""
  )
}
```

`r text`

## No stem ID duplicates

```{r}
#| eval: false

# Make a dummy data set to test
dupl <- slice_sample(data_cor, n = 15) # some duplicated
dupl <- dupl %>%
  mutate(Diameter = replace(
    Diameter, IdStem == dupl$IdStem[1],
    dupl$Diameter[1] + 10
  )) # one duplicated with different DBH
data_cor <- rbind(data_cor, dupl)
data_cor <- rbind(data_cor, slice_sample(dupl, n = 3)) # some duplicated twice
data_cor %>%
  filter(IdStem == dupl$IdStem[2]) %>%
  slice_sample(, n = 2) -> dupl_sev_census # one IDstem with several duplicated censuses #nolint
data_cor <- rbind(data_cor, dupl_sev_census)
```

```{r nostemID_duplicate}
nb_stem_plot <- data_cor %>%
  count(IdStem, IdCensus)

if (all(length(unique(nb_stem_plot$n)) == 1, unique(nb_stem_plot$n) == 1)) {
  text <- "There is no duplicated stem identifiers within a same census."
} else {
  stem_dupli <- nb_stem_plot %>%
    filter(n > 1)
  text <- paste("There are ",
    dim(stem_dupli)[1],
    " cases of duplicated stem identifiers within a same census,",
    " with a number of duplications ranging from ",
    stem_dupli %>% summarise(min(n)),
    " and ",
    stem_dupli %>% summarise(max(n)),
    " (mean = ",
    stem_dupli %>% summarise(round(mean(n), 2)),
    "). These duplications concern ",
    length(unique(stem_dupli$IdStem)),
    " stems.",
    sep = ""
  )
}
```

`r text`

```{r rmv_full_duplicate}
if (length(unique(nb_stem_plot$n)) != 1) { # if there are some duplicates
  prev_nb_obs <- dim(data_cor)[1]
  data_cor <- data_cor %>% distinct() # remove fully duplicated rows
  if (prev_nb_obs - dim(data_cor)[1] != 0) { # if there were some fully duplicated rows #nolint
    text <- paste(
      prev_nb_obs - dim(data_cor)[1],
      "rows are true duplicates (fully identical rows).",
      "These true duplicates are removed from the dataset, leaving a dataset of ", # nolint
      dim(data_cor)[1],
      " observations."
    )
  } else {
    text <- ""
  }
  nb_stem_plot_bis <- data_cor %>%
    count(IdStem, IdCensus)
} else { # if no duplicated rows
  text <- ""
}
```

`r text`

```{r non_full_duplicates}
if (length(unique(nb_stem_plot$n)) != 1) { # if there are some duplicates
  if (all(
    length(unique(nb_stem_plot_bis$n)) == 1,
    unique(nb_stem_plot_bis$n) == 1
  )) {
    text <- "There is no more duplicated stem identifiers within a same census."
    still_stem_dupli <- FALSE
  } else {
    stem_dupli_bis <- nb_stem_plot_bis %>%
      filter(n > 1)
    text <- paste(
      "There are still",
      dim(stem_dupli_bis)[1],
      "cases of duplicated stem identifiers within a same census,",
      "which are not fully replicated rows.",
      "This concern the following cases:"
    )
    still_stem_dupli <- TRUE
  }
} else {
  still_stem_dupli <- FALSE
}
```

`r text`

```{r which_still_dupli}
if (still_stem_dupli == TRUE) {
  stem_dupli_bis %>% knitr::kable()
}
```

```{r warn_still_duplicate}
if (still_stem_dupli == TRUE) {
  text <- "IMPORTANT: Please check this cases in your raw data before starting the process again." # nolint
} else {
  text <- ""
}
```

`r text`

## Are there multi-stemmed trees?

```{r nbstemID}
if (length(unique(data_cor$IdStem)) == length(unique(data_cor$IdTree))) {
  text <- "The number of stem identifiers and the number of tree identifiers are equal, suggesting either that there are no multi-stemmed trees, or that the multiple stems are considered as different individuals." # nolint
} else {
  if (length(unique(data_cor$IdStem)) > length(unique(data_cor$IdTree))) {
    text <- "There are more stem identifiers than tree identifiers, suggesting that there are some multi-stemmed trees." # nolint
  } else {
    text <- "There are less stem identifiers than tree identifiers, which suggest a problem of duplicated stem identifiers." # nolint
  }
}
```

`r text`

## No NA is scientific name ?

```{r na_sp}
if (anyNA(data_cor$ScientificName)) {
  nb_na_sp <- sum(is.na(data_cor$ScientificName))
  perc_na_sp <- round(
    sum(is.na(data_cor$ScientificName)) * 100 / dim(data_cor)[1], 2
  )
  nb_na_sp_tree <- data_cor %>%
    filter(is.na(ScientificName)) %>%
    summarise((length(unique(IdTree))))
  text <- paste("There are",
    nb_na_sp,
    "observations with NAs in the scientific names, which represent",
    perc_na_sp,
    "% of the observations.
    This concerns",
    nb_na_sp_tree,
    "trees.",
    "The observations with NAs in the scientific names
    are distributed across the plots and censuses as follow:",
    sep = " "
  )
} else {
  text <- "There are no observations with NAs
  in the scientific names in the data."
}
```

`r text`

```{r explo_na_sp}
if (anyNA(data_cor$ScientificName)) {
  data_cor %>%
    filter(is.na(ScientificName)) %>%
    count(Plot, IdCensus) %>%
    pivot_wider(names_from = Plot, values_from = n) %>%
    knitr::kable()
}
```

## Only one scientific name per tree 

This step adds two columns to the dataset:

- ScientificName_cor : corrected scientific name, see SpName_codecor 
to know how it was filled. 

- SpName_codecor : the type of correction that has been done: 
- "no_cor" when there was no problem, 
- "gapfilled" observations with NA in the ScientificName, 
but for which other observations of the same trees 
have a unique ScientificName.
These case were gapfilled but putting the scientific name
of the other observations in ScientificName_cor
- "more than one scientific name" for observations of individuals with 
at least 2 different (non NA) scientific names. 
As we cannot know which is correct, 
all observations of the given individuals are set to NA. 

> To discuss : it would be worth it gapfilling the scientific name 
when some obs are indet. as well,
But I don't know if the Inded are always coded the same, and how...



```{r dummy_Sp_dupl}
#| eval: false

# create a dummy dataset to test (works for Mbaiki but probably not for all)
set.seed(55)
# add a different species names for one census
# of a tree with NA in ScientificName
sample_temp <- data_cor %>%
  filter(is.na(ScientificName)) %>%
  slice_sample(, n = 1) %>%
  select(IdCensus, IdStem)
data_cor <- data_cor %>%
  mutate(ScientificName = replace(ScientificName,
    (IdCensus == sample_temp$IdCensus & IdStem == sample_temp$IdStem),
    values = "Bla blabbla"
  ))
# add a different species names for one census
# of a tree with not an NA in ScientificName
sample_temp2 <- data_cor %>%
  filter(!(is.na(ScientificName))) %>%
  slice_sample(, n = 1) %>%
  select(IdCensus, IdStem)
data_cor <- data_cor %>%
  mutate(ScientificName = replace(ScientificName,
    (IdCensus == sample_temp2$IdCensus & IdStem == sample_temp2$IdStem),
    values = "Bli blibbli"
  ))
# add two differents species names for a tree that
# is not NA (so will have 3 species names in total)
sampleInd <- data_cor %>% # nolint
  filter(!(is.na(ScientificName))) %>%
  select(IdTree) %>%
  sample_n(, size = 1) %>%
  as.numeric()
sampleCens <- data_cor %>% # nolint
  filter(IdTree == sampleInd) %>%
  select(IdCensus) %>%
  sample_n(, size = 2) %>%
  as.vector()
data_cor <- data_cor %>%
  mutate(ScientificName = replace(
    ScientificName,
    (IdCensus == sampleCens$IdCensus[1] & IdTree == sampleInd),
    values = "Blu blubblu"
  ))
data_cor <- data_cor %>%
  mutate(ScientificName = replace(
    ScientificName,
    (IdCensus == sampleCens$IdCensus[2] & IdTree == sampleInd),
    values = "Blo blobblo"
  ))
# data_cor %>% filter(ScientificName %in% c("Bla blabbla", "Bli blibbli", "Blu blubblu", "Blo blobblo")) %>%  select(IdTree) # nolint
```


```{r one_sp_per_tree}
nb_sp_tree <- data_cor %>%
  group_by(IdTree) %>%
  summarise(nbsp = length(unique(ScientificName)))

data_cor <- data_cor %>% mutate(
  ScientificName_cor = as.character(NA),
  SpName_codecor = as.factor(NA)
)

# when there is just one scientific name for all the observation of a given tree
tree_no_cor <- nb_sp_tree %>% filter(nbsp == 1)
# use the ScientificNames as the corrected one
data_cor <- data_cor %>%
  mutate(ScientificName_cor = ifelse(IdTree %in% tree_no_cor$IdTree,
    ScientificName,
    ScientificName_cor
  ))
# fill in the code_cor
data_cor <- data_cor %>%
  mutate(SpName_codecor = ifelse(IdTree %in% tree_no_cor$IdTree,
    "no_cor",
    SpName_codecor
  ))

# When there are two scientific names
tree_2_sp <- nb_sp_tree %>% filter(nbsp == 2)
for (i in tree_2_sp$IdTree) {
  names2 <- data_cor %>%
    filter(IdTree == i) %>%
    reframe(names = unique(ScientificName))
  if (any(is.na(names2))) { # if one of the two names is NA
    data_cor <- data_cor %>%
      mutate(ScientificName_cor = ifelse(IdTree == i,
        ifelse(
          is.na(ScientificName), # if NA in Scientific name
          names2[!is.na(names2)], # we use the name of the other obs
          ScientificName
        ), # otherwise, use the name of the current obs
        ScientificName_cor
      )) # do nothing if not the tree of interest
    # fill in the code_cor
    data_cor <- data_cor %>%
      mutate(SpName_codecor = ifelse(IdTree == i,
        ifelse(
          is.na(ScientificName), # if NA in Scientific name
          "gapfilled",
          "no_cor"
        ),
        SpName_codecor
      )) # do nothing if not the tree of interest
  } else { # if none of the two names are NA
    data_cor <- data_cor %>%
      mutate(ScientificName_cor = ifelse(IdTree == i,
        NA, # put NA as we don't know which one is the good one
        ScientificName_cor
      ))
    # fill in the code_cor
    data_cor <- data_cor %>%
      mutate(SpName_codecor = ifelse(IdTree == i,
        "more than one scientific name",
        SpName_codecor
      ))
  }
}

# when there are more than two scientific name for a given tree
tree_many_sp <- nb_sp_tree %>% filter(nbsp > 2)
# replace the name by NA (as we don't know which one is the good one
data_cor <- data_cor %>%
  mutate(ScientificName_cor = ifelse(IdTree %in% tree_many_sp,
    NA,
    ScientificName_cor
  ))
# fill in the code_cor
data_cor <- data_cor %>%
  mutate(SpName_codecor = ifelse(IdTree %in% tree_many_sp,
    "more than one scientific name",
    SpName_codecor
  ))
```



```{r textSPdupl}
if (all(data_cor$SpName_codecor == "no_cor")) { # no duplicated names
  text <- "There was always only one scientific name for a given individual
  (or always a NA). No change has been made.
  The value is ScientificName_cor is the same than in ScientificName,
  and SpName_codecor is always 'no_cor'"
} else { # if some correction have been made
  nb_filled <- data_cor %>%
    filter(SpName_codecor == "gapfilled") %>%
    count()
  nb_prob <- data_cor %>%
    filter(SpName_codecor == "more than one scientific name") %>%
    count()
  if (nb_filled != 0) {
    text1 <- paste(
      "There were",
      nb_filled,
      "observations with NA in the ScientificName,
                   but for which other observations of the same trees
                   have a unique ScientificName.
                   These case were gapfilled by putting the scientific name
                   of the other observations in ScientificName_cor. The
                   value in SpName_codecor is 'gapfilled'."
    )
  } else {
    text1 <- ""
  }
  if (nb_prob != 0) {
    text2 <- paste(
      "There were",
      nb_prob,
      "observations of individuals with at least 2 different (non NA)
                   scientific names.
                   As we cannot know which is correct,
                   all observations of the given individuals are set to NA.
                   The value in SpName_codecor
      is 'more than one scientific name.`"
    )
  } else {
    text2 <- ""
  }
  text <- paste(text1, "\n", text2)
}
```

`r text`


## Only one set of coordinates per tree and no missing coordinates

<!-- Which coordinates do we take ? check if there are dataset with no absolute coordinate-->

## All trees within the plot

# First step of data visualization

-   stem abundance by plot and census year

-   mean (or median) dbh by plot and census year

-   number of species

-   maps per plot and per census

# DBH corrections

![Flowchart of DBH corrections](flowchart_dbh_correction.png)

We keep the original `Diameter` column and add a `diameter_cor` column where we implement diameter corrections. 

```{r}
data_cor$diameter_cor <- data_cor$Diameter
```

## Taper correction

The taper correction estimates DBH for diameter values measured above breast height. We used the function from function from Cushman et al. (2014): 
$$ DBH = D \cdot e^{b(HOM - 1.3)}$$
where $DBH$ is the estimated diameter at breast height, $D$ is the measured diameter (cm) at height of measurement $HOM$ (m) and $b$ is defined as follows:

$$b = e^{-2.0205 - 0.5053 ln(diam) + 0.3748 ln(HOM)}$$
Note: We did not use the equation from Cushman et al. (2020) because, although it includes additional data from a larger number of sites, the equation can give negative values of $b$, resulting in values of $DBH$ less than $D$. One solution in the future is to recalibrate the function using the original data from Cushman et al. (2020). 


```{r}
source("r/taper.R")
if (any(colnames(data_cor) == "HOM")) {
  text <- paste(
    "The height of measurement information is available so we could apply the",
    "taper correction from Cushman et al., 2014."
  )
  data_cor$diameter_cor <- taper(data_cor$diameter_cor, data_cor$HOM)
  subset(data_cor, HOM > 1.3) |>
    ggplot(aes(x = Diameter, y = diameter_cor, col = HOM)) +
    geom_abline(intercept = 0, slope = 1, lty = 2) +
    geom_point() +
    labs(x = "Original diameter (cm)", y = "Taper-corrected diameter (cm)") +
    scale_color_viridis_c() +
    theme_classic()
} else {
  text <- paste(
    "There is no information on height of measurement information,",
    "so we could not apply any taper correction."
  )
}
```

`r text`

## Interpolating missing measurements

If trees are missed in a census and remeasured in a later census, we use the DBH values from the previous and next census to interpolate the missing DBH value(s). 

This may lead to bias in the first and last censuses, where missed DBHs cannot be detected. We need to check that recruitment and mortality rates are not systematically lower in these two censuses. 

```{r}
source("r/interpolate.R")

# columns with tree-level information in data_cor
col_tree <-
  !grepl(
    "census|year|month|day|date|status|code|diam|hom|pom|circ|dbh",
    tolower(colnames(data_cor))
  )

missing_censuses <- data_cor |>
  # list all census years by plot and subplot
  group_by(Plot, Subplot) |>
  reframe(Year = unique(Year)) |>
  ungroup() |>
  # add all combinations of IdTree x IdCensus (by Plot and Subplot)
  merge(
    unique(data_cor[, c("Plot", "Subplot", "IdTree")]),
    by = c("Plot", "Subplot")
  ) |>
  # add tree-level information
  merge(unique(data_cor[, col_tree])) |>
  # add DBH information
  merge(
    data_cor[, c("IdTree", "Year", "diameter_cor")],
    by = c("IdTree", "Year"),
    all = TRUE
  ) |>
  # interpolate missing diameters
  group_by(IdTree) |>
  mutate(
    diameter_cor = interpolate(diameter_cor, Year)
  ) |>
  subset(!is.na(diameter_cor))

# add interpolated DBHs to raw data
data_cor <- merge(
  data_cor,
  missing_censuses,
  all.y = TRUE
)
rm(missing_censuses)

if (sum(is.na(data_cor$Diameter)) > 0) {
  text <- paste(
    sum(is.na(data_cor$Diameter)),
    "missing DBH values were interpolated."
  )
  illustration <- sample(subset(data_cor, is.na(Diameter))$IdTree, 12)
  subset(data_cor, IdTree %in% illustration) |>
    ggplot(aes(x = Year, y = diameter_cor)) +
    geom_point(aes(col = is.na(Diameter))) +
    labs(x = "Census year", y = "Diameter (cm)", col = "Interpolated") +
    scale_color_manual(values = c("black", "red")) +
    facet_wrap(~IdTree, scales = "free") +
    theme_classic() +
    theme(legend.position = "bottom")
} else {
  text <- "No missing DBH values were interpolated."
}
```

`r text`

## Correct DBH changes

### Estimate DBH growth

```{r}
data_cor <- data_cor |>
  group_by(IdTree) |>
  mutate(
    diam_growth = c(NA, diff(diameter_cor)) / c(NA, diff(Year)),
    diff_year = c(NA, diff(Year))
  )
```

### Define DBH change threshold

> proposal: use general threshold for lower bound, and moving 99th (or 95th) percentile for upper bound

DBH thresholds are defined by size class: trees DBH are split into 20 quantiles. The 99th DBH growth value per quantile is defined as the upper limit above with DBH growth values are considered outliers. The lower DBH growht limit is defined as the 1st percentile of DBH growth for all trees. 

```{r}
data_cor <- data_cor |>
  ungroup() |>
  mutate(diam_quant = ntile(diameter_cor, 20)) |>
  mutate(dgrowth_lower = quantile(diam_growth, 0.01, na.rm = TRUE)) |>
  group_by(diam_quant) |>
  mutate(dgrowth_upper = quantile(diam_growth, 0.99, na.rm = TRUE)) |>
  mutate(outlier = diam_growth < dgrowth_lower | diam_growth > dgrowth_upper) |>
  mutate(average_growth = mean(diam_growth[!outlier], na.rm = TRUE)) |>
  ungroup() |> 
  mutate(diam_growth_cor = ifelse(outlier, average_growth, diam_growth))

data_thresh <- data_cor |> 
  group_by(diam_quant) |> 
  summarise(diam_min = min(diameter_cor), 
            diam_max = max(diameter_cor), 
            dgrowth_upper = unique(dgrowth_upper), 
            dgrowth_lower = unique(dgrowth_lower), 
            average_growth = unique(average_growth)
            ) |> 
  pivot_longer(cols = c("diam_max", "diam_min"))
data_cor |> 
  subset(outlier) |> 
  ggplot(aes(x = diameter_cor, y = diam_growth)) +
  geom_point() +
  geom_line(data = data_thresh, aes(x = value, y = dgrowth_upper), col = 2) +
  geom_line(data = data_thresh, aes(x = value, y = dgrowth_lower), col = 2) +
  geom_line(data = data_thresh, aes(x = value, y = average_growth), col = 4) +
  labs(x = "Diameter (cm)", y = "Diameter growth (cm/yr)") +
  scale_x_log10() +
  theme_classic()
```

This graph shows all outlier DBH growth values (in cm/yr), as well as the lower and upper bounds of "acceptable" DBH growth (in red) and the average DBH growth with which outlier values are replaced (blue), as a function of tree DBH.  

### Shift DBH series

When there is a reported change in height of measurement but the new height of measurement is unknown.

```{r}
data_cor <- data_cor |>
  group_by(IdTree) |>
  mutate(
    hom_increase = c(NA, diff(HOM) > 0)
  )
# what column could have info on HOM change when no HOM value is available?
```

### Substitute excessive DBH changes

Outliers in DBH growth (but not DBHs) are replaced by the mean DBH growth of the corresponding size class (after excluding outlier values). 

> Replacement by average DBH growth values is not optimal; it may introduce bias depending on the variable being estimated. For example, for AGB productivity it would be better to use average AGB.

`r with(data_cor, sum(diam_growth_cor != diam_growth & !is.na(diam_growth_cor)))` outlier DBH growth values were substituted. The following graph shows a subset of trees where the most DBH growth values were substituted. 

```{r}
id_cor <- subset(data_cor, outlier)$IdTree
tree_subs <-
  data_cor |>
  subset(IdTree %in% id_cor) |>
  group_by(IdTree) |>
  summarise(
    nsubs = sum(diam_growth_cor != diam_growth & !is.na(diam_growth_cor))
  ) |>
  arrange(desc(nsubs))

data_cor |>
  subset(IdTree %in% tree_subs$IdTree[1:6]) |>
  pivot_longer(cols = c("diam_growth", "diameter_cor")) |>
  ggplot(aes(x = Year)) +
  geom_point(aes(y = value, col = outlier)) +
  labs(col = "Outlier DBH growth?") +
  scale_color_manual(values = c("black", "red")) +
  facet_grid(name ~ IdTree, scales = "free") +
  theme_classic()
```

```{r}
data_aggr <- data_cor |>
  ungroup() |>
  select(Site, Plot, Subplot, Year) |>
  unique()
```

# Biodiversity metrics


# Basal area 

# Aboveground biomass

> For now use wood density from BIOMASS package; will be changed later to use the consolidated species list. 

```{r}
data_cor <-
  data_cor |>
  ungroup() |>
  separate_wider_delim(ScientificName_cor, " ",
    names = c("Genus_cor", "Species_cor"), too_many = "drop"
  )

data_cor$wd <- with(data_cor, getWoodDensity(
  genus = Genus_cor,
  species = Species_cor,
  stand = paste(Plot, Subplot, Year)
)$meanWD)
```
We use equation 7 from Chave et al. (2014) to estimate tree-level aboveground biomass. 

> need to add plot coordinates; temporarily use random coordinates

```{r}
# e_var <- computeE(c(11, 0)) #nolint
e_var <- 0
agb_func <- function(d, wd) {
  return(exp(-2.023977 - 0.89563505 * e_var + 0.92023559 *
               log(wd) + 2.79495823 * log(d) - 0.04606298 * (log(d)^2)) / 1000)
}
data_cor <- data_cor |>
  mutate(
    agb = agb_func(diameter_cor, wd),
    agb_growth = agb_func(diameter_cor - diam_growth + diam_growth_cor, wd) -
      agb_func(diameter_cor - diam_growth, wd)
  )
```

## AGB stocks


```{r}
data_aggr <-
  data_cor |>
  group_by(Plot, Subplot, Year) |>
  summarise(
    agb = sum(agb / SubplotArea)
  ) |>
  merge(data_aggr, all.y = TRUE)
```

```{r}
data_aggr |>
  ggplot(aes(x = Year, y = agb, color = factor(Plot), group = Subplot)) +
  geom_point() +
  geom_line() +
  labs(y = "Aboveground biomass (t/ha)", col = "Plot") +
  theme_classic()
```

## AGB fluxes

```{r}
# for each census year, add information on previous and next census years
data_year <- data_aggr |>
  select(Plot, Subplot, Year) |>
  group_by(Plot, Subplot) |>
  mutate(
    prev_census = c(NA, Year[-length(Year)]),
    next_census = c(Year[-1], NA)
  ) |>
  ungroup()

# add information on each tree's recruitment and mortality years
data_cor <- data_cor |>
  merge(data_year) |>
  mutate(recr_year = min(Year), mort_year = max(Year), .by = IdTree)
```

```{r recruitment}
data_aggr <- data_cor |>
  # agb recruitment per tree
  mutate(recr = ifelse(Year == recr_year, agb / (Year - prev_census), 0)) |>
  group_by(Plot, Subplot, Year) |>
  summarise(
    agb_recr = sum(recr / SubplotArea)
  ) |>
  merge(data_aggr, all.y = TRUE)

data_aggr |>
  ggplot(aes(x = Year, y = agb_recr, color = factor(Plot), group = Subplot)) +
  geom_point() +
  geom_line() +
  labs(y = "Aboveground biomass recruitment (t/ha/yr)", col = "Plot") +
  theme_classic()
```

```{r growth}
data_aggr <- data_cor |>
  mutate(agb_gr_yr = agb_growth / (Year - prev_census)) |>
  group_by(Plot, Subplot, Year) |>
  summarise(agb_growth = sum(agb_gr_yr / SubplotArea, na.rm = TRUE)) |>
  merge(data_aggr, all.y = TRUE)

data_aggr |>
  ggplot(aes(x = Year, y = agb_growth, color = factor(Plot), group = Subplot)) +
  geom_point() +
  geom_line() +
  labs(y = "Aboveground biomass growth (t/ha/yr)", col = "Plot") +
  theme_classic()
```


```{r mort}
data_aggr <- data_cor |>
  subset(Year == mort_year) |>
  group_by(Plot, Subplot, Year, next_census) |>
  summarise(agb_mort = sum(agb / (next_census - Year) / SubplotArea)) |>
  mutate(Year = next_census) |>
  select(Plot, Subplot, Year, agb_mort) |>
  merge(data_aggr, all.y = TRUE)

data_aggr |>
  ggplot(aes(x = Year, y = agb_mort, color = factor(Plot), group = Subplot)) +
  geom_point() +
  geom_line() +
  labs(y = "Aboveground biomass mortality (t/ha/yr)", col = "Plot") +
  theme_classic()
```
